# 
# Synthesis run script generated by Vivado
# 

set TIME_start [clock seconds] 
namespace eval ::optrace {
  variable script "W:/Sai_CMPEN331_Final/Sai_CMPEN331_Final.runs/synth_1/pipelinedcpu.tcl"
  variable category "vivado_synth"
}

# Try to connect to running dispatch if we haven't done so already.
# This code assumes that the Tcl interpreter is not using threads,
# since the ::dispatch::connected variable isn't mutex protected.
if {![info exists ::dispatch::connected]} {
  namespace eval ::dispatch {
    variable connected false
    if {[llength [array get env XILINX_CD_CONNECT_ID]] > 0} {
      set result "true"
      if {[catch {
        if {[lsearch -exact [package names] DispatchTcl] < 0} {
          set result [load librdi_cd_clienttcl[info sharedlibextension]] 
        }
        if {$result eq "false"} {
          puts "WARNING: Could not load dispatch client library"
        }
        set connect_id [ ::dispatch::init_client -mode EXISTING_SERVER ]
        if { $connect_id eq "" } {
          puts "WARNING: Could not initialize dispatch client"
        } else {
          puts "INFO: Dispatch client connection id - $connect_id"
          set connected true
        }
      } catch_res]} {
        puts "WARNING: failed to connect to dispatch server - $catch_res"
      }
    }
  }
}
if {$::dispatch::connected} {
  # Remove the dummy proc if it exists.
  if { [expr {[llength [info procs ::OPTRACE]] > 0}] } {
    rename ::OPTRACE ""
  }
  proc ::OPTRACE { task action {tags {} } } {
    ::vitis_log::op_trace "$task" $action -tags $tags -script $::optrace::script -category $::optrace::category
  }
  # dispatch is generic. We specifically want to attach logging.
  ::vitis_log::connect_client
} else {
  # Add dummy proc if it doesn't exist.
  if { [expr {[llength [info procs ::OPTRACE]] == 0}] } {
    proc ::OPTRACE {{arg1 \"\" } {arg2 \"\"} {arg3 \"\" } {arg4 \"\"} {arg5 \"\" } {arg6 \"\"}} {
        # Do nothing
    }
  }
}

proc create_report { reportName command } {
  set status "."
  append status $reportName ".fail"
  if { [file exists $status] } {
    eval file delete [glob $status]
  }
  send_msg_id runtcl-4 info "Executing : $command"
  set retval [eval catch { $command } msg]
  if { $retval != 0 } {
    set fp [open $status w]
    close $fp
    send_msg_id runtcl-5 warning "$msg"
  }
}
OPTRACE "synth_1" START { ROLLUP_AUTO }
set_msg_config  -id {Place 30-58}  -string {{ERROR: [Place 30-58] IO placement is infeasible. Number of unplaced terminals (160) is greater than number of available sites (100).
The following are banks with available pins: 
 IO Group: 2 with : SioStd: LVCMOS18   VCCO = 1.8 Termination: 0  TermDir:  Out  RangeId: 2 Drv: 12  has only 100 sites available on device, but needs 160 sites.
	Term: ealu[0]
	Term:  ealu[1]
	Term:  ealu[2]
	Term:  ealu[3]
	Term:  ealu[4]
	Term:  ealu[5]
	Term:  ealu[6]
	Term:  ealu[7]
	Term:  ealu[8]
	Term:  ealu[9]
	Term:  ealu[10]
	Term:  ealu[11]
	Term:  ealu[12]
	Term:  ealu[13]
	Term:  ealu[14]
	Term:  ealu[15]
	Term:  ealu[16]
	Term:  ealu[17]
	Term:  ealu[18]
	Term:  ealu[19]
	Term:  ealu[20]
	Term:  ealu[21]
	Term:  ealu[22]
	Term:  ealu[23]
	Term:  ealu[24]
	Term:  ealu[25]
	Term:  ealu[26]
	Term:  ealu[27]
	Term:  ealu[28]
	Term:  ealu[29]
	Term:  ealu[30]
	Term:  ealu[31]
	Term:  inst[0]
	Term:  inst[1]
	Term:  inst[2]
	Term:  inst[3]
	Term:  inst[4]
	Term:  inst[5]
	Term:  inst[6]
	Term:  inst[7]
	Term:  inst[8]
	Term:  inst[9]
	Term:  inst[10]
	Term:  inst[11]
	Term:  inst[12]
	Term:  inst[13]
	Term:  inst[14]
	Term:  inst[15]
	Term:  inst[16]
	Term:  inst[17]
	Term:  inst[18]
	Term:  inst[19]
	Term:  inst[20]
	Term:  inst[21]
	Term:  inst[22]
	Term:  inst[23]
	Term:  inst[24]
	Term:  inst[25]
	Term:  inst[26]
	Term:  inst[27]
	Term:  inst[28]
	Term:  inst[29]
	Term:  inst[30]
	Term:  inst[31]
	Term:  malu[0]
	Term:  malu[1]
	Term:  malu[2]
	Term:  malu[3]
	Term:  malu[4]
	Term:  malu[5]
	Term:  malu[6]
	Term:  malu[7]
	Term:  malu[8]
	Term:  malu[9]
	Term:  malu[10]
	Term:  malu[11]
	Term:  malu[12]
	Term:  malu[13]
	Term:  malu[14]
	Term:  malu[15]
	Term:  malu[16]
	Term:  malu[17]
	Term:  malu[18]
	Term:  malu[19]
	Term:  malu[20]
	Term:  malu[21]
	Term:  malu[22]
	Term:  malu[23]
	Term:  malu[24]
	Term:  malu[25]
	Term:  malu[26]
	Term:  malu[27]
	Term:  malu[28]
	Term:  malu[29]
	Term:  malu[30]
	Term:  malu[31]
	Term:  pc[0]
	Term:  pc[1]
	Term:  pc[2]
	Term:  pc[3]
	Term:  pc[4]
	Term:  pc[5]
	Term:  pc[6]
	Term:  pc[7]
	Term:  pc[8]
	Term:  pc[9]
	Term:  pc[10]
	Term:  pc[11]
	Term:  pc[12]
	Term:  pc[13]
	Term:  pc[14]
	Term:  pc[15]
	Term:  pc[16]
	Term:  pc[17]
	Term:  pc[18]
	Term:  pc[19]
	Term:  pc[20]
	Term:  pc[21]
	Term:  pc[22]
	Term:  pc[23]
	Term:  pc[24]
	Term:  pc[25]
	Term:  pc[26]
	Term:  pc[27]
	Term:  pc[28]
	Term:  pc[29]
	Term:  pc[30]
	Term:  pc[31]
	Term:  wdi[0]
	Term:  wdi[1]
	Term:  wdi[2]
	Term:  wdi[3]
	Term:  wdi[4]
	Term:  wdi[5]
	Term:  wdi[6]
	Term:  wdi[7]
	Term:  wdi[8]
	Term:  wdi[9]
	Term:  wdi[10]
	Term:  wdi[11]
	Term:  wdi[12]
	Term:  wdi[13]
	Term:  wdi[14]
	Term:  wdi[15]
	Term:  wdi[16]
	Term:  wdi[17]
	Term:  wdi[18]
	Term:  wdi[19]
	Term:  wdi[20]
	Term:  wdi[21]
	Term:  wdi[22]
	Term:  wdi[23]
	Term:  wdi[24]
	Term:  wdi[25]
	Term:  wdi[26]
	Term:  wdi[27]
	Term:  wdi[28]
	Term:  wdi[29]
	Term:  wdi[30]
	Term:  and wdi[31]}}  -suppress 
OPTRACE "Creating in-memory project" START { }
create_project -in_memory -part xc7z010clg400-1

set_param project.singleFileAddWarning.threshold 0
set_param project.compositeFile.enableAutoGeneration 0
set_param synth.vivado.isSynthRun true
set_property webtalk.parent_dir W:/Sai_CMPEN331_Final/Sai_CMPEN331_Final.cache/wt [current_project]
set_property parent.project_path W:/Sai_CMPEN331_Final/Sai_CMPEN331_Final.xpr [current_project]
set_property default_lib xil_defaultlib [current_project]
set_property target_language Verilog [current_project]
set_property ip_output_repo w:/Sai_CMPEN331_Final/Sai_CMPEN331_Final.cache/ip [current_project]
set_property ip_cache_permissions {read write} [current_project]
OPTRACE "Creating in-memory project" END { }
OPTRACE "Adding files" START { }
read_verilog -library xil_defaultlib {
  W:/Sai_CMPEN331_Final/addsub32.v
  W:/Sai_CMPEN331_Final/alu.v
  W:/Sai_CMPEN331_Final/cla32.v
  W:/Sai_CMPEN331_Final/cla_32.v
  W:/Sai_CMPEN331_Final/data_memory.v
  W:/Sai_CMPEN331_Final/dffe32.v
  W:/Sai_CMPEN331_Final/instruction_memory.v
  W:/Sai_CMPEN331_Final/mux2x32.v
  W:/Sai_CMPEN331_Final/mux2x5.v
  W:/Sai_CMPEN331_Final/mux4x32.v
  W:/Sai_CMPEN331_Final/pipedereg.v
  W:/Sai_CMPEN331_Final/pipeemreg.v
  W:/Sai_CMPEN331_Final/pipeexe.v
  W:/Sai_CMPEN331_Final/pipeid.v
  W:/Sai_CMPEN331_Final/pipeidcu.v
  W:/Sai_CMPEN331_Final/pipeif.v
  W:/Sai_CMPEN331_Final/pipeir.v
  W:/Sai_CMPEN331_Final/pipemem.v
  W:/Sai_CMPEN331_Final/pipemwreg.v
  W:/Sai_CMPEN331_Final/pipepc.v
  W:/Sai_CMPEN331_Final/pipewb.v
  W:/Sai_CMPEN331_Final/regfile.v
  W:/Sai_CMPEN331_Final/shift.v
  W:/Sai_CMPEN331_Final/pipelinedcpu.v
}
OPTRACE "Adding files" END { }
# Mark all dcp files as not used in implementation to prevent them from being
# stitched into the results of this synthesis run. Any black boxes in the
# design are intentionally left as such for best results. Dcp files will be
# stitched into the design at a later time, either when this synthesis run is
# opened, or when it is stitched into a dependent implementation run.
foreach dcp [get_files -quiet -all -filter file_type=="Design\ Checkpoint"] {
  set_property used_in_implementation false $dcp
}
read_xdc W:/Sai_CMPEN331_Final/CMPen331.xdc
set_property used_in_implementation false [get_files W:/Sai_CMPEN331_Final/CMPen331.xdc]

set_param ips.enableIPCacheLiteLoad 1
close [open __synthesis_is_running__ w]

OPTRACE "synth_design" START { }
synth_design -top pipelinedcpu -part xc7z010clg400-1
OPTRACE "synth_design" END { }


OPTRACE "write_checkpoint" START { CHECKPOINT }
# disable binary constraint mode for synth run checkpoints
set_param constraints.enableBinaryConstraints false
write_checkpoint -force -noxdef pipelinedcpu.dcp
OPTRACE "write_checkpoint" END { }
OPTRACE "synth reports" START { REPORT }
create_report "synth_1_synth_report_utilization_0" "report_utilization -file pipelinedcpu_utilization_synth.rpt -pb pipelinedcpu_utilization_synth.pb"
OPTRACE "synth reports" END { }
file delete __synthesis_is_running__
close [open __synthesis_is_complete__ w]
OPTRACE "synth_1" END { }
